"use strict";jQuery.base64=(function($){var _PADCHAR="=",_ALPHA="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",_VERSION="1.0";function _getbyte64(s,i){var idx=_ALPHA.indexOf(s.charAt(i));if(idx===-1){throw"Cannot decode base64"}return idx}function _decode(s){var pads=0,i,b10,imax=s.length,x=[];s=String(s);if(imax===0){return s}if(imax%4!==0){throw"Cannot decode base64"}if(s.charAt(imax-1)===_PADCHAR){pads=1;if(s.charAt(imax-2)===_PADCHAR){pads=2}imax-=4}for(i=0;i<imax;i+=4){b10=(_getbyte64(s,i)<<18)|(_getbyte64(s,i+1)<<12)|(_getbyte64(s,i+2)<<6)|_getbyte64(s,i+3);x.push(String.fromCharCode(b10>>16,(b10>>8)&255,b10&255))}switch(pads){case 1:b10=(_getbyte64(s,i)<<18)|(_getbyte64(s,i+1)<<12)|(_getbyte64(s,i+2)<<6);x.push(String.fromCharCode(b10>>16,(b10>>8)&255));break;case 2:b10=(_getbyte64(s,i)<<18)|(_getbyte64(s,i+1)<<12);x.push(String.fromCharCode(b10>>16));break}return x.join("")}function _getbyte(s,i){var x=s.charCodeAt(i);if(x>255){throw"INVALID_CHARACTER_ERR: DOM Exception 5"}return x}function _encode(s){if(arguments.length!==1){throw"SyntaxError: exactly one argument required"}s=String(s);var i,b10,x=[],imax=s.length-s.length%3;if(s.length===0){return s}for(i=0;i<imax;i+=3){b10=(_getbyte(s,i)<<16)|(_getbyte(s,i+1)<<8)|_getbyte(s,i+2);x.push(_ALPHA.charAt(b10>>18));x.push(_ALPHA.charAt((b10>>12)&63));x.push(_ALPHA.charAt((b10>>6)&63));x.push(_ALPHA.charAt(b10&63))}switch(s.length-imax){case 1:b10=_getbyte(s,i)<<16;x.push(_ALPHA.charAt(b10>>18)+_ALPHA.charAt((b10>>12)&63)+_PADCHAR+_PADCHAR);break;case 2:b10=(_getbyte(s,i)<<16)|(_getbyte(s,i+1)<<8);x.push(_ALPHA.charAt(b10>>18)+_ALPHA.charAt((b10>>12)&63)+_ALPHA.charAt((b10>>6)&63)+_PADCHAR);break}return x.join("")}return{decode:_decode,encode:_encode,VERSION:_VERSION}}(jQuery));/**
 * @initialize VaultGuard
**/
var VaultGuard = {
	core : {
		service : {},
		workflow : {},
		helper : {},
		constant : {}
	}
};

function hex_decode($hex) {
    var $str = '';
    for (var i = 0; i < $hex.length; i += 2)
        $str += String.fromCharCode(parseInt($hex.substr(i, 2), 16));
    return $str;
}

function hex_encode($str) {
    var $hex = '';
    for (var i = 0; i < $str.length; i++)
        $hex += $str.charCodeAt(i).toString(16);
    return $hex;
}
/** *	@service Base64Decode *	@desc Decodes data from Base64 * *	@param data string [memory] optional default false * *	@return result string [memory] *	 *	@author Vibhaj Rajan <vibhaj8@gmail.com> ***/VaultGuard.core.service.Base64Decode = {	input : function(){		return {			optional : { data : '' }		}	},		run : function($memory){				$memory['result'] = $.base64.decode($memory['data']);		$memory['valid'] = true;		return $memory;	},		output : function(){		return ['result'];	}};/** *	@service Base64Encode *	@desc Encodes data to Base64 * *	@param data string [memory] optional default false * *	@return result string [memory] *	 *	@author Vibhaj Rajan <vibhaj8@gmail.com> ***/VaultGuard.core.service.Base64Encode = {	input : function(){		return {			optional : { data : '' }		}	},		run : function($memory){		$memory['result'] = $.base64.encode($memory['data']);		$memory['valid'] = true;		return $memory;	},		output : function(){		return ['result'];	}};/** *	@helper CheckSecure * *	@param index *	@param element * *	@author Vibhaj Rajan <vibhaj8@gmail.com> ***/VaultGuard.core.helper.CheckSecure = (function(){	return function($index, $el){		$val = VaultGuard.core.helper.dataXor($(this).val());				if($val === false){			FireSpark.core.service.CheckForm.result = false;			FireSpark.core.helper.checkFail($(this), 'Error in Securing Data : ' + FireSpark.core.constant.validation_status + '.error');			return false;		}				$(this).val($val);	};})();/** *	@helper DataXor * *	@param data *	@param key * *	@author Vibhaj Rajan <vibhaj8@gmail.com> ***/VaultGuard.core.helper.dataXor = function($data, $key){	var $memory = Snowblozm.Kernel.run({		service: VaultGuard.core.service.SecureSalt,		data: $data,		key: $key || false	}, {});		if($memory['valid'])		return $memory['result'] || false;	else		return $data;}/** *	@helper DataXor64 * *	@param data *	@param key * *	@author Vibhaj Rajan <vibhaj8@gmail.com> ***/VaultGuard.core.helper.dataXor64 = function($data, $decode, $key){	var $memory = Snowblozm.Kernel.run({		service: VaultGuard.core.workflow.SecureSalt,		data: $data,		decode: $decode || false,		key: $key || false	}, {});		if($memory['valid'])		return $memory['result'] || false;	else		return false;}/** *	@service SecureSalt *	@desc Applies XOR Cipher to data using key * *	@param data object [memory] optional default '' *	@param key string [memory] optional default VaultGuard.core.constant.accesskey * *	@return result string [memory] * *	@reference http://codecraft.proboards.com/index.cgi?board=web&action=display&thread=1137 *	@author Vibhaj Rajan <vibhaj8@gmail.com> ***/VaultGuard.core.service.SecureSalt = {	input : function(){		return {			optional : { 				data : '', 				key : VaultGuard.core.constant.accesskey			}		};	},		run : function($memory){		var $result = '';		if($memory['key']){			var $data = $memory['data'];						var $key = hex_decode($memory['key']);						var i, j = 0;			for(i = j = 0; i < $data.length; i++){				$result += String.fromCharCode($data.charCodeAt(i) ^ $key.charCodeAt(j));				j = (j < $key.length) ? j + 1 : 0;			}		}			$memory['result'] = $result;		$memory['valid'] = true;		return $memory;	},		output : function(){		return ['result'];	}};/** *	@workflow SecureSalt *	@desc Applies XOR Cipher to data using key and returns base64 encoded * *	@param data object [memory] optional default '' *	@param decode boolean [memory] optional default false *	@param key string [memory] optional default VaultGuard.core.constant.accesskey * *	@return result string [memory] * *	@author Vibhaj Rajan <vibhaj8@gmail.com> ***/VaultGuard.core.workflow.SecureSalt = {	input : function(){		return {			optional : { 				data : '', 				decode : false,				key : VaultGuard.core.constant.accesskey			}		};	},		run : function($memory){		var $workflow;				if($memory['decode']){			$workflow = [{				service: VaultGuard.core.service.Base64Decode,				output: { result : 'data' }			},{				service: VaultGuard.core.service.SecureSalt			}];		}		else {			$workflow = [{				service: VaultGuard.core.service.SecureSalt			},{				service: VaultGuard.core.service.Base64Encode,				input : { data : 'result' }			}];		}				return Snowblozm.Kernel.execute($workflow, $memory);	},		output : function(){		return ['result'];	}};/**
 *	@config VaultGuard.core.constant
**/
VaultGuard.core.constant = {
	base64map : "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
	accesskey : false,
}
