/** *	@service CipherRC4 *	@desc Applies RC4 Cipher to data using key * *	@param data object [memory] optional default '' *	@param key string [memory] optional default VaultGuard.core.constant.accesskey * *	@return result string [memory] * *	@reference https://gist.github.com/2185197 *	@author Vibhaj Rajan <vibhaj8@gmail.com> ***/VaultGuard.core.service.CipherRC4 = {	input : function(){		return {			optional : { 				data : '', 				key : VaultGuard.core.constant.accesskey			}		};	},		run : function($memory){		var $result = '';		if($memory['key']){			var $data = $memory['data'];			var $key = $memory['key'];					var s = [], j = 0, x;			for (var i = 0; i < 256; i++) {				s[i] = i;			}						for (i = 0; i < 256; i++) {				j = (j + s[i] + $key.charCodeAt(i % $key.length)) % 256;				x = s[i];				s[i] = s[j];				s[j] = x;			}						i = 0;			j = 0;			for (var y = 0; y < $data.length; y++) {				i = (i + 1) % 256;				j = (j + s[i]) % 256;				x = s[i];				s[i] = s[j];				s[j] = x;				$result += String.fromCharCode($data.charCodeAt(y) ^ s[(s[i] + s[j]) % 256]);			}		}			$memory['result'] = $result;		$memory['valid'] = true;		return $memory;	},		output : function(){		return ['result'];	}};